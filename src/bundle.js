(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl = 
        "https://raw.githubusercontent.com/ArubaKLM/MLB_ballparks/master/mlb_stadium.csv";

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.Opened = new Date(d.Opened);
        d.Capacity = +d.Capacity;
        d.Cost = +d.Cost;
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    
    return data;
  };

    // useEffect(() => {
    //   const row = d => {
    //     d.Opened = +d['Opened'];
    //     d.Capacity = +d['Capacity'];
    //     d.Cost = +d['Cost'] + '달러';
    //     return d;
    //   };
    // csv(csvUrl).then(setData);
    // }, []);

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', { 
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    colorScale,
    colorValue,
    tooltipFormat,
    circleRadius
  }) =>
    data.map(d => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), fill: colorScale(colorValue(d)), r: circleRadius },
        React.createElement( 'title', null, tooltipFormat(xValue(d)) )
      )
    ));

  const Colorlegend = ({colorScale, tickSpacing =20, tickSize=7 }) => 
    colorScale.domain().map((domainValue, i) => (
        React.createElement( 'g', { transform: `translate(0, ${i * tickSpacing})` },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
          React.createElement( 'text', null, domainValue )
        )
    ));

  const width = 960;
  const menuHeight = 50;
  const height = 500 - menuHeight;
  const margin = { top: 10, right: 130, bottom: 80, left: 110 };
  const xAxisLabelOffset = 65;
  const yAxisLabelOffset = 60;

  const attributes = [
    { value: 'Capacity', label: '수용 인원(명)' },
    { value: 'Cost', label: '건설 비용 (백만$)' },
    { value: 'Opened', label: '개장 연도' }
  ];


  const getLabel = value => {
    for(let i = 0; i < attributes.length; i++){
      if(attributes[i].value === value){
        return attributes[i].label;
      }
    }
  };

  const App = () => {
    const data = useData();
    const initialYAttribute = 'Capacity';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);
    const yValue = d => d[yAttribute];
    const yAxisLabel = getLabel(yAttribute);
    
    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    console.log(data.columns);
    
    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;
    
    const xValue = d => d.Opened;
    const xAxisLabel = '개장 연도';
    const colorLegendLabel = '지붕 종류';
    
    const xAxisTickFormat = d3.timeFormat("%Y");

    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();
    
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))  
      .range([innerHeight, 0])
      .nice();
    
    const colorValue = d => d.Rooftype;
    
    const colorScale = d3.scaleOrdinal()
    	.domain(data.map(colorValue))
      .range(['#8E6C8A', '#42A5B3', '#E6842A']);
    
    return (
       React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: 'menus-container' },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Y"),
          React$1__default.createElement( ReactDropdown, {
              options: attributes, id: "y-select", Value: yAttribute, onChange: ({value}) => setYAttribute(value) }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "색상")
        ),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 8 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},
            ${innerHeight /2}) rotate(-90)` },
              yAxisLabel
            ),
            React$1__default.createElement( AxisLeft, { 
              yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),
            React$1__default.createElement( 'g', { className: "tick", transform: `translate(${innerWidth +20}, ${menuHeight})` },
              React$1__default.createElement( 'text', {
                className: "legend-label", x: 40, y: -20, textAnchor: "middle" },
                colorLegendLabel
              ),   
            	React$1__default.createElement( Colorlegend, { 
              	colorScale: colorScale })
            ),
            React$1__default.createElement( Marks, {
              data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, colorScale: colorScale, colorValue: colorValue, tooltipFormat: xAxisTickFormat, circleRadius: 5 })
          )
        )
      )
    );
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,